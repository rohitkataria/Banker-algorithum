Student Name: Rohit	
Student Id: 11607573	
Email Address: rohitkataria0143@gmail.com	
GitHub Link: 
Code: 13


Description:
Reena’s operating system uses an algorithm for deadlock avoidance to manage the allocation of resources say three namely A, B, and C to three processes P0, P1, and P2. Consider the following scenario as reference .user must enter the current state of system as given in this example :
Suppose P0 has 0,0,1 instances , P1 is having 3,2,0 instances and P2 occupies 2,1,1 instances of A,B,C resource respectively.
Also the maximum number of instances required for P0 is 8,4,3 and for p1 is 6,2,0 and finally for P2 there are 3,3,3 instances of resources A,B,C respectively. There are 3 instances of resource A, 2 instances of resource B and 2 instances of resource C available. Write a program to check whether Reena’s operating system is in a safe state or not in the following independent requests for additional resources in the
current state:
1.	Request1: P0 requests 0 instances of A and 0 instances of B and 2 instances of C.
2.	Request2: P1 requests for 2 instances of A, 0 instances of B and 0 instances of C.
All the request must be given by user as input.

Banker’s 

Algorithm: 

Step 1:
	Let process p1 ----- request i.
	
	If request I <= Need i , go to step 2.

Step 2:
	If request <= Available , go to step 3.

Step 3: 
	Available:=Available – request i.
	Allocation i=Allocation i + request i.
	Need i = Need – request i.

Step 4:	
	Check if new state is safe or not.
Test Cases:
	
	Test Case 1:
Number of processes should be greater than one if you want to use banker’s algorithm otherwise there is no use of it only one member in safe sequence is for worth.

System is in safe state.



	 






Test Case A: Safe sequence when processes are prevented from deadlock:
1.	Request1: P0 requests 0 instances of A and 0 instances of B and 2 instances of C.
        System is in safe state.

		


 







Test case  B:
1.	Request2: P1 requests for 2 instances of A, 0 instances of B and 0 instances of C.
2.	System is not in safe system.

 

























Boundary Condition:
1.	For all the input cases user should enter integer value .
2.	All the requirements must be entered to run the program.

Code Snippet :
      

TIME COMPLEXITY OF BANKER ALGORITHUM:

My question is, how is time complexity 0(n * n * m)? More specifically, how does the m term enter the polynomial? Is it because we have to do an element-by-element comparison on a vector of length m?
but it is also nested in a repeat loop. If that loop can run, in worst case, n times, then the procedure has O(n*n*m) time complexity.
So, the code that executes in the for loop has O(m+m) time complexity.
Of course, O(m+m) = O(m) and the final complexity is O(n*n*m).
